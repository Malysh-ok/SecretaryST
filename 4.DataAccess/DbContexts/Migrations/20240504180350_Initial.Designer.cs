// <auto-generated />
using System;
using DataAccess.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.DbContexts.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240504180350_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DelegationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasComputedColumnSql("LastName || ' ' || FirstName || IIF(Patronymic IS NULL, '', ' ' || Patronymic)", true);

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SexId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SportUnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("PK_Athletes");

                    b.HasIndex("DelegationId");

                    b.HasIndex("SexId");

                    b.HasIndex("SportUnitId");

                    b.ToTable("Common_Athletes", "Common", t =>
                        {
                            t.HasComment("Спортсмены");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Delegation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RepresentativeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("PK_Delegations");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("Common_Delegations", "Common", t =>
                        {
                            t.HasComment("Делегации");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Referee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Domicile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasComputedColumnSql("LastName || ' ' || FirstName || IIF(Patronymic IS NULL, '', ' ' || Patronymic)", true);

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RefereeLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RefereeRefereeJobTitleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("PK_Referees");

                    b.HasIndex("RefereeLevelId");

                    b.HasIndex("RefereeRefereeJobTitleId")
                        .IsUnique();

                    b.ToTable("Common_Referees", "Common", t =>
                        {
                            t.HasComment("Судьи");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Representative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasComputedColumnSql("LastName || ' ' || FirstName || IIF(Patronymic IS NULL, '', ' ' || Patronymic)", true);

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SexId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("PK_Representatives");

                    b.HasIndex("SexId");

                    b.ToTable("Common_Representatives", "Common", t =>
                        {
                            t.HasComment("Представители");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.CompetitionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionsStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConductingOrganizations")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("DetailedCompetitionStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_Competitions");

                    b.HasIndex("CompetitionsStatusId");

                    b.HasIndex("DetailedCompetitionStatusId");

                    b.ToTable("Common_CompetitionData", "Common", t =>
                        {
                            t.HasComment("Данные о соревновании");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.DistanceEntities.SportEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsShort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_SportEvents");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Distance_SportEvents", "Distance", t =>
                        {
                            t.HasComment("Виды программ");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.DistanceEntities.SportUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentSportUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SexId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SportEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SportUnitTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("PK_SportUnits");

                    b.HasIndex("ParentSportUnitId");

                    b.HasIndex("SexId");

                    b.HasIndex("SportEventId");

                    b.HasIndex("SportUnitTypeId");

                    b.ToTable("Distance_SportUnits", "Distance", t =>
                        {
                            t.HasComment("Спортивные юниты");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.CompetitionsStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NamePlural")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_CompetitionsStatuses");

                    b.ToTable("Lib_CompetitionsStatuses", "Library", t =>
                        {
                            t.HasComment("Статусы соревнований");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.DetailedCompetitionStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionsStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_DetailedCompetitionStatuses");

                    b.HasIndex("CompetitionsStatusId");

                    b.ToTable("Lib_DetailedCompetitionStatuses", "Library", t =>
                        {
                            t.HasComment("Статусы и наименования соревнований");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisciplineGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisciplineSubGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_Disciplines");

                    b.HasIndex("DisciplineGroupId");

                    b.HasIndex("DisciplineSubGroupId");

                    b.ToTable("Lib_Disciplines", "Library", t =>
                        {
                            t.HasComment("Дисциплины");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.DisciplineGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_DisciplineGroups");

                    b.ToTable("Lib_DisciplineGroups", "Library", t =>
                        {
                            t.HasComment("Группы дисциплин");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.DisciplineSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisciplineGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_DisciplineSubGroups");

                    b.HasIndex("DisciplineGroupId");

                    b.ToTable("Lib_DisciplineSubGroups", "Library", t =>
                        {
                            t.HasComment("Подгруппы дисциплин");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.RefereeJobTitle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_RefereeJobTitles");

                    b.ToTable("Lib_RefereeJobTitles", "Library", t =>
                        {
                            t.HasComment("Судейские должности");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.RefereeLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_RefereeLevels");

                    b.ToTable("Lib_RefereeLevels", "Library", t =>
                        {
                            t.HasComment("Судейские категории");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.Sex", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalityName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalityNamePlural")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamNamePlural")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_Sexes");

                    b.ToTable("Lib_Sexes", "Library", t =>
                        {
                            t.HasComment("Варианты пола");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.SportUnitType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuxName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_SportUnitTypes");

                    b.ToTable("Lib_SportUnitTypes", "Library", t =>
                        {
                            t.HasComment("Типы спортивных юнитов");
                        });
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Athlete", b =>
                {
                    b.HasOne("ProblemDomain.Entities.CommonEntities.Delegation", "Delegation")
                        .WithMany("Athletes")
                        .HasForeignKey("DelegationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Athletes_DelegationId");

                    b.HasOne("ProblemDomain.Entities.LibraryEntities.Sex", "Sex")
                        .WithMany("Athletes")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Athletes_SexId");

                    b.HasOne("ProblemDomain.Entities.DistanceEntities.SportUnit", "SportUnit")
                        .WithMany("Athletes")
                        .HasForeignKey("SportUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Athletes_SportUnitId");

                    b.Navigation("Delegation");

                    b.Navigation("Sex");

                    b.Navigation("SportUnit");
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Delegation", b =>
                {
                    b.HasOne("ProblemDomain.Entities.CommonEntities.Representative", "Representative")
                        .WithMany("Delegations")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Delegations_RepresentativeId");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Referee", b =>
                {
                    b.HasOne("ProblemDomain.Entities.LibraryEntities.RefereeLevel", "RefereeLevel")
                        .WithMany("Referees")
                        .HasForeignKey("RefereeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Referees_RefereeLevelId");

                    b.HasOne("ProblemDomain.Entities.LibraryEntities.RefereeJobTitle", "RefereeJobTitle")
                        .WithOne()
                        .HasForeignKey("ProblemDomain.Entities.CommonEntities.Referee", "RefereeRefereeJobTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Referees_RefereeingPositionId");

                    b.Navigation("RefereeJobTitle");

                    b.Navigation("RefereeLevel");
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Representative", b =>
                {
                    b.HasOne("ProblemDomain.Entities.LibraryEntities.Sex", "Sex")
                        .WithMany("Representatives")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Representatives_SexId");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("ProblemDomain.Entities.CompetitionData", b =>
                {
                    b.HasOne("ProblemDomain.Entities.LibraryEntities.CompetitionsStatus", "CompetitionsStatus")
                        .WithMany("Competitions")
                        .HasForeignKey("CompetitionsStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SportEvents_CompetitionsStatusId");

                    b.HasOne("ProblemDomain.Entities.LibraryEntities.DetailedCompetitionStatus", "DetailedCompetitionStatus")
                        .WithMany("Competitions")
                        .HasForeignKey("DetailedCompetitionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SportEvents_DetailedCompetitionStatusId");

                    b.Navigation("CompetitionsStatus");

                    b.Navigation("DetailedCompetitionStatus");
                });

            modelBuilder.Entity("ProblemDomain.Entities.DistanceEntities.SportEvent", b =>
                {
                    b.HasOne("ProblemDomain.Entities.LibraryEntities.Discipline", "Discipline")
                        .WithMany("SportEvents")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SportEvents_DisciplineId");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("ProblemDomain.Entities.DistanceEntities.SportUnit", b =>
                {
                    b.HasOne("ProblemDomain.Entities.DistanceEntities.SportUnit", "ParentSportUnit")
                        .WithMany("ChildSportUnits")
                        .HasForeignKey("ParentSportUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_SportUnits_ParentSportUnitId");

                    b.HasOne("ProblemDomain.Entities.LibraryEntities.Sex", "Sex")
                        .WithMany("SportUnits")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SportUnits_SexId");

                    b.HasOne("ProblemDomain.Entities.DistanceEntities.SportEvent", "SportEvent")
                        .WithMany("SportUnits")
                        .HasForeignKey("SportEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SportUnits_SportEventId");

                    b.HasOne("ProblemDomain.Entities.LibraryEntities.SportUnitType", "SportUnitType")
                        .WithMany("SportUnits")
                        .HasForeignKey("SportUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SportUnits_SportUnitTypeId");

                    b.Navigation("ParentSportUnit");

                    b.Navigation("Sex");

                    b.Navigation("SportEvent");

                    b.Navigation("SportUnitType");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.DetailedCompetitionStatus", b =>
                {
                    b.HasOne("ProblemDomain.Entities.LibraryEntities.CompetitionsStatus", "CompetitionsStatus")
                        .WithMany("DetailedCompetitionStatuses")
                        .HasForeignKey("CompetitionsStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionsStatus");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.Discipline", b =>
                {
                    b.HasOne("ProblemDomain.Entities.LibraryEntities.DisciplineGroup", "DisciplineGroup")
                        .WithMany("Disciplines")
                        .HasForeignKey("DisciplineGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Disciplines_DisciplineGroupId");

                    b.HasOne("ProblemDomain.Entities.LibraryEntities.DisciplineSubGroup", "DisciplineSubGroup")
                        .WithMany("Disciplines")
                        .HasForeignKey("DisciplineSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Disciplines_DisciplineSubGroupId");

                    b.Navigation("DisciplineGroup");

                    b.Navigation("DisciplineSubGroup");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.DisciplineSubGroup", b =>
                {
                    b.HasOne("ProblemDomain.Entities.LibraryEntities.DisciplineGroup", "DisciplineGroup")
                        .WithMany("DisciplineSubGroups")
                        .HasForeignKey("DisciplineGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DisciplineSubGroups_DisciplineGroupId");

                    b.Navigation("DisciplineGroup");
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Delegation", b =>
                {
                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("ProblemDomain.Entities.CommonEntities.Representative", b =>
                {
                    b.Navigation("Delegations");
                });

            modelBuilder.Entity("ProblemDomain.Entities.DistanceEntities.SportEvent", b =>
                {
                    b.Navigation("SportUnits");
                });

            modelBuilder.Entity("ProblemDomain.Entities.DistanceEntities.SportUnit", b =>
                {
                    b.Navigation("Athletes");

                    b.Navigation("ChildSportUnits");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.CompetitionsStatus", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("DetailedCompetitionStatuses");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.DetailedCompetitionStatus", b =>
                {
                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.Discipline", b =>
                {
                    b.Navigation("SportEvents");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.DisciplineGroup", b =>
                {
                    b.Navigation("DisciplineSubGroups");

                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.DisciplineSubGroup", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.RefereeLevel", b =>
                {
                    b.Navigation("Referees");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.Sex", b =>
                {
                    b.Navigation("Athletes");

                    b.Navigation("Representatives");

                    b.Navigation("SportUnits");
                });

            modelBuilder.Entity("ProblemDomain.Entities.LibraryEntities.SportUnitType", b =>
                {
                    b.Navigation("SportUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
